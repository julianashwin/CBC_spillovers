import_filename =  paste0(clean_dir,"articles", spec,".csv")
articles_df <- read.csv(import_filename, encoding = "utf-8", stringsAsFactors = FALSE)
articles_df[,paste0(variablenames,"_news")] <- articles_df[,variablenames]
articles_df <- articles_df[,c("quarter", paste0(variablenames,"_news"))]
# Combine into one quarterly df
topics_df <- merge(minutes_df, speeches_df, by = "quarter", all.x = TRUE)
topics_df <- merge(topics_df, articles_df, by = "quarter", all.x = TRUE)
# Import SPF data
spf_df <- read.csv("data/SPF/spf_disp_clean.csv", stringsAsFactors = F)
SPF_variables <- unique(unlist(str_extract_all(names(spf_df), "[A-Z]+")))
SPF_variables <- SPF_variables[which(SPF_variables != "TBOND")]
# Merge SPF with topics
spf_df$quarter <- as.Date(spf_df$quarter)
topics_df$quarter <- as.Date(topics_df$quarter)
total_df <- merge(spf_df, topics_df, by = "quarter")
total_df$quarter <- as.Date(total_df$quarter)
total_df <- total_df[which(total_df$quarter < "2020-01-01"),]
"
Match the topics to variables
"
topic_summary$SPF_vars <- ""
top_terms <- c("economi", "growth")
SPF_var <- "NGDP"
match_vars <- function(topic_summary, SPF_var, top_terms){
obs <-   which(str_detect(topic_summary$Top.5.Words, top_terms[1]) &
str_detect(topic_summary$Top.5.Words, top_terms[2]))
topic_summary$SPF_vars[obs] <- paste0(topic_summary$SPF_vars[obs], SPF_var, ",")
if (length(obs) < 1){
print(paste("No match for", SPF_var))
}
if (length(obs) > 1){
print(paste("Multiple matches for", SPF_var))
}
return(topic_summary)
}
topic_summary <- match_vars(topic_summary, "NGDP", c("economi", "growth"))
topic_summary <- match_vars(topic_summary, "RGDP", c("economi", "growth"))
topic_summary <- match_vars(topic_summary, "CPI", c("price", "inflat"))
topic_summary <- match_vars(topic_summary, "EMP", c("job", "emp"))
topic_summary <- match_vars(topic_summary, "UNEMP", c("job", "emp"))
topic_summary <- match_vars(topic_summary, "CPROF", c("corpor|compani", "profit"))
topic_summary <- match_vars(topic_summary, "INDPROD", c("industri", "produc|manufac"))
topic_summary <- match_vars(topic_summary, "HOUSING", c("hous", "home"))
topic_summary <- match_vars(topic_summary, "RRESINV", c("hous", "home"))
topic_summary <- match_vars(topic_summary, "RNRESIN", c("invest", "capit"))
topic_summary <- match_vars(topic_summary, "RCONSUM", c("spend", "consum"))
topic_summary <- match_vars(topic_summary, "RFEDGOV", c("tax", "budget"))
topic_summary <- match_vars(topic_summary, "RSLGOV", c("tax", "budget"))
panelnames <- c("variable", "quarter", "disp", "disp_f1", "disp_f2", "disp_f3", "disp_f4",
"mins", "speeches", "news", "double_matched",
"disp_std", "disp_f1_std", "disp_f2_std", "disp_f3_std", "disp_f4_std",
"mins_std", "speeches_std", "news_std")
total_panel <- data.frame(matrix(NA, nrow = 0, ncol = length(panelnames)))
total_df$double_matched <- NA
for (spf_var in SPF_variables){
# Pull out the relevant SPF variables
total_df$disp <- total_df[, paste0(spf_var, "_dispersion")]
total_df$disp_f1 <- total_df[, paste0(spf_var, "_f1_dispersion")]
total_df$disp_f2 <- total_df[, paste0(spf_var, "_f2_dispersion")]
total_df$disp_f3 <- total_df[, paste0(spf_var, "_f3_dispersion")]
total_df$disp_f4 <- total_df[, paste0(spf_var, "_f4_dispersion")]
# Pull out the relevant topic variables
tnum <- which(str_detect(topic_summary$SPF_vars, paste0(spf_var,",")))
if (length(tnum) == 1 ){
total_df$mins <- total_df[, paste0("T", tnum)]
total_df$speeches <- total_df[, paste0("T", tnum, "_speech")]
total_df$news <- total_df[, paste0("T", tnum, "_news")]
total_df$double_matched <- length(tnum)
} else if (length(tnum) == 0){
print(paste("No topic found for", spf_var))
total_df$mins <- NA
total_df$speeches <-NA
total_df$news <- NA
total_df$double_matched <- NA
} else {
print(paste("Multiple topics found for", spf_var))
total_df$mins <- rowSums(total_df[, paste0("T", tnum)])
total_df$speeches <- rowSums(total_df[, paste0("T", tnum, "_speech")])
total_df$news <- rowSums(total_df[, paste0("T", tnum, "_news")])
total_df$double_matched <- length(tnum)
}
temp_df <- total_df[,c("quarter", "disp", "disp_f1", "disp_f2", "disp_f3", "disp_f4",
"mins", "speeches", "news", "double_matched")]
temp_df$disp_std <- standardise(temp_df$disp)
temp_df$disp_f1_std <- standardise(temp_df$disp_f1)
temp_df$disp_f2_std <- standardise(temp_df$disp_f2)
temp_df$disp_f3_std <- standardise(temp_df$disp_f3)
temp_df$disp_f4_std <- standardise(temp_df$disp_f4)
temp_df$mins_std <- standardise(temp_df$mins)
temp_df$speeches_std <- standardise(temp_df$speeches)
temp_df$news_std <- standardise(temp_df$news)
temp_df$variable <- spf_var
temp_df[,panelnames]
total_panel <- rbind(total_panel, temp_df)
}
ggplot(total_panel) + theme_bw() +
facet_wrap(variable~., nrow = 4, scales = "free") +
geom_line(aes(x = quarter, y = news_std, color = "Speeches"), alpha = 0.3) +
geom_line(aes(x = quarter, y = speeches_std, color = "News"), alpha = 0.3) +
geom_line(aes(x = quarter, y = mins_std, color = "Minutes")) +
geom_line(aes(x = quarter, y = disp_std, color = "Dispersion")) +
xlab("Date") + ylab("Std. Units")
### Merge in the other macro data
spf_gb_panel <- read.csv("data/spf_gb_panel.csv", stringsAsFactors = FALSE)
spf_gb_panel$quarter <- as.Date(spf_gb_panel$quarter)
total_panel$quarter <- as.Date(total_panel$quarter)
total_panel <- merge(total_panel, spf_gb_panel, by = c("variable", "quarter"), all.x = T)
obs <- which(total_panel$variable == "RRESINV")
cor.test(total_panel$disp[obs], total_panel$mins[obs])
total_panel$quarter <- as.Date(total_panel$quarter)
total_panel$period <- as.numeric(as.factor(total_panel$quarter))
total_panel <- pdata.frame(data.frame(total_panel), index = c("variable", "period"))
### Fill in table
obs <- which(comp_K_df$K == k)
comp_K_df$not_matched[obs] <- paste(unique(total_panel$variable[which(is.na(total_panel$mins))]), collapse = ",")
comp_K_df$double_matched[obs] <- paste(unique(total_panel$variable[which(total_panel$double_matched > 1)]), collapse = ",")
test_temp <- cor.test(total_panel$disp_std, total_panel$mins_std)
comp_K_df$disp[obs] <- paste0(round(test_temp$estimate,3), get_siglevel(test_temp))
test_temp <- cor.test(total_panel$GB_update_abs_std, total_panel$mins_std)
comp_K_df$GB_update[obs] <- paste0(round(test_temp$estimate,3), get_siglevel(test_temp))
test_temp <- cor.test(total_panel$SPF_update_abs_std, total_panel$mins_std)
comp_K_df$SPF_update[obs] <- paste0(round(test_temp$estimate,3), get_siglevel(test_temp))
test_temp <- cor.test(total_panel$GB_now_error_abs_std, total_panel$mins_std)
comp_K_df$GB_error[obs] <- paste0(round(test_temp$estimate,3), get_siglevel(test_temp))
test_temp <- cor.test(total_panel$SPF_now_error_abs_std, total_panel$mins_std)
comp_K_df$SPF_error[obs] <- paste0(round(test_temp$estimate,3), get_siglevel(test_temp))
test_temp <- cor.test(total_panel$GB_SPF_now_gap_abs_std, total_panel$mins_std)
comp_K_df$GB_SPF_gap[obs] <- paste0(round(test_temp$estimate,3), get_siglevel(test_temp))
#summary(felm(disp_std ~ mins_std, total_panel))
}
View(comp_K_df)
### Some topic model stats
total_dtm <- readRDS("data/topic_data/overall/total_dtm.rds")
short_dtm <- readRDS("data/topic_data/overall/short_dtm.rds")
temp_df <- data.frame(K = 15:40, loglik = NA, size = NA, dist_corp = NA, dist_df = NA,
prominence = NA, coherence = NA, exclusivity = NA)
for (ii in 1:nrow(temp_df)){
paragraph_lda <- readRDS(file = paste0("data/topic_data/overall/short_lda_k",temp_df$K[ii],".rds"))
if (paragraph_lda@n == sum(short_dtm)){
diags <- topic_diagnostics(paragraph_lda,short_dtm)
temp_df$size[ii] <- mean(diags$topic_size)
temp_df$dist_corp[ii] <- mean(diags$dist_from_corpus)
temp_df$dist_df[ii] <- mean(diags$tf_df_dist)
temp_df$prominence[ii] <- mean(diags$doc_prominence)
temp_df$coherence[ii] <- mean(diags$topic_coherence)
temp_df$exclusivity[ii] <- mean(diags$topic_exclusivity)
}
terms(paragraph_lda,10)
temp_df$loglik[ii] <- paragraph_lda@loglikelihood
}
comp_K_df1 <- merge(comp_K_df, temp_df, by = "K")
View(comp_K_df1)
ggplot(comp_K_df1, aes(x= k)) +
geom_line(aes(y = standardise(coherence), color ="Coherence")) +
geom_line(aes(y = standardise(exclusivity), color ="Exclusivity")) +
geom_line(aes(y = (standardise(coherence) + standardise(exclusivity)), color ="Both"))
15-6
View(comp_K_df1)
ggplot(comp_K_df1, aes(x= k)) +
geom_line(aes(y = standardise(coherence), color ="Coherence"))
ggplot(comp_K_df1, aes(x= K)) +
geom_line(aes(y = standardise(coherence), color ="Coherence"))
ggplot(comp_K_df1, aes(x= K)) +
geom_line(aes(y = standardise(coherence), color ="Coherence")) +
geom_line(aes(y = standardise(exclusivity), color ="Exclusivity"))
ggplot(comp_K_df1, aes(x= K)) +
geom_line(aes(y = standardise(coherence), color ="Coherence")) +
geom_line(aes(y = standardise(exclusivity), color ="Exclusivity")) +
geom_line(aes(y = (standardise(coherence) + standardise(exclusivity)), color ="Both"))
k=29
spec <- "_qly"
spec <- "_full_qly_k30"
spec <- "_full_qly_k40"
spec <- "_qly_k30"
spec <- paste0("_qly_k",k)
#spec <- "_guid_k30_qly"
##### Names of topic variables
variablenames <- paste0("T", 1:k)
# Import the topic summary for interpretation
import_filename =  "data/topic_data/full_topics_summary_k30.csv"
import_filename =  "data/topic_data/full_topics_summary_k40.csv"
import_filename =  "data/topic_data/short_topics_summary_k30.csv"
import_filename =  paste0("data/topic_data/short_topics_summary_k",k,".csv")
#import_filename =  "data/topic_data/joint_topics_summary_guid_k30.csv"
topic_summary <- read.csv(import_filename, encoding = "utf-8", stringsAsFactors = FALSE)
if (str_detect(spec,"guid")){
variablenames <- topic_summary$Topic
}
############################# Import the topic proportions #############################
# Minutes
import_filename = paste0(clean_dir,"minutes", spec,".csv")
minutes_df <- read.csv(import_filename, encoding = "utf-8", stringsAsFactors = FALSE)
minutes_df <- minutes_df[,c("quarter", variablenames)]
#topics_df <- minutes_df
# Speeches
import_filename = paste0(clean_dir,"speeches", spec,".csv")
speeches_df <- read.csv(import_filename, encoding = "utf-8", stringsAsFactors = FALSE)
speeches_df[,paste0(variablenames,"_speech")] <- speeches_df[,variablenames]
speeches_df <- speeches_df[,c("quarter", paste0(variablenames,"_speech"))]
# Articles
import_filename =  paste0(clean_dir,"articles", spec,".csv")
articles_df <- read.csv(import_filename, encoding = "utf-8", stringsAsFactors = FALSE)
articles_df[,paste0(variablenames,"_news")] <- articles_df[,variablenames]
articles_df <- articles_df[,c("quarter", paste0(variablenames,"_news"))]
# Combine into one quarterly df
topics_df <- merge(minutes_df, speeches_df, by = "quarter", all.x = TRUE)
topics_df <- merge(topics_df, articles_df, by = "quarter", all.x = TRUE)
# Import SPF data
spf_df <- read.csv("data/SPF/spf_disp_clean.csv", stringsAsFactors = F)
SPF_variables <- unique(unlist(str_extract_all(names(spf_df), "[A-Z]+")))
SPF_variables <- SPF_variables[which(SPF_variables != "TBOND")]
# Merge SPF with topics
spf_df$quarter <- as.Date(spf_df$quarter)
topics_df$quarter <- as.Date(topics_df$quarter)
total_df <- merge(spf_df, topics_df, by = "quarter")
total_df$quarter <- as.Date(total_df$quarter)
total_df <- total_df[which(total_df$quarter < "2020-01-01"),]
"
Match the topics to variables
"
topic_summary$SPF_vars <- ""
top_terms <- c("economi", "growth")
SPF_var <- "NGDP"
match_vars <- function(topic_summary, SPF_var, top_terms){
obs <-   which(str_detect(topic_summary$Top.5.Words, top_terms[1]) &
str_detect(topic_summary$Top.5.Words, top_terms[2]))
topic_summary$SPF_vars[obs] <- paste0(topic_summary$SPF_vars[obs], SPF_var, ",")
if (length(obs) < 1){
print(paste("No match for", SPF_var))
}
if (length(obs) > 1){
print(paste("Multiple matches for", SPF_var))
}
return(topic_summary)
}
topic_summary <- match_vars(topic_summary, "NGDP", c("economi", "growth"))
topic_summary <- match_vars(topic_summary, "RGDP", c("economi", "growth"))
topic_summary <- match_vars(topic_summary, "CPI", c("price", "inflat"))
topic_summary <- match_vars(topic_summary, "EMP", c("job", "emp"))
topic_summary <- match_vars(topic_summary, "UNEMP", c("job", "emp"))
topic_summary <- match_vars(topic_summary, "CPROF", c("corpor|compani", "profit"))
topic_summary <- match_vars(topic_summary, "INDPROD", c("industri", "produc|manufac"))
topic_summary <- match_vars(topic_summary, "HOUSING", c("hous", "home"))
topic_summary <- match_vars(topic_summary, "RRESINV", c("hous", "home"))
topic_summary <- match_vars(topic_summary, "RNRESIN", c("invest", "capit"))
topic_summary <- match_vars(topic_summary, "RCONSUM", c("spend", "consum"))
topic_summary <- match_vars(topic_summary, "RFEDGOV", c("tax", "budget"))
topic_summary <- match_vars(topic_summary, "RSLGOV", c("tax", "budget"))
panelnames <- c("variable", "quarter", "disp", "disp_f1", "disp_f2", "disp_f3", "disp_f4",
"mins", "speeches", "news", "double_matched",
"disp_std", "disp_f1_std", "disp_f2_std", "disp_f3_std", "disp_f4_std",
"mins_std", "speeches_std", "news_std")
total_panel <- data.frame(matrix(NA, nrow = 0, ncol = length(panelnames)))
total_df$double_matched <- NA
for (spf_var in SPF_variables){
# Pull out the relevant SPF variables
total_df$disp <- total_df[, paste0(spf_var, "_dispersion")]
total_df$disp_f1 <- total_df[, paste0(spf_var, "_f1_dispersion")]
total_df$disp_f2 <- total_df[, paste0(spf_var, "_f2_dispersion")]
total_df$disp_f3 <- total_df[, paste0(spf_var, "_f3_dispersion")]
total_df$disp_f4 <- total_df[, paste0(spf_var, "_f4_dispersion")]
# Pull out the relevant topic variables
tnum <- which(str_detect(topic_summary$SPF_vars, paste0(spf_var,",")))
if (length(tnum) == 1 ){
total_df$mins <- total_df[, paste0("T", tnum)]
total_df$speeches <- total_df[, paste0("T", tnum, "_speech")]
total_df$news <- total_df[, paste0("T", tnum, "_news")]
total_df$double_matched <- length(tnum)
} else if (length(tnum) == 0){
print(paste("No topic found for", spf_var))
total_df$mins <- NA
total_df$speeches <-NA
total_df$news <- NA
total_df$double_matched <- NA
} else {
print(paste("Multiple topics found for", spf_var))
total_df$mins <- rowSums(total_df[, paste0("T", tnum)])
total_df$speeches <- rowSums(total_df[, paste0("T", tnum, "_speech")])
total_df$news <- rowSums(total_df[, paste0("T", tnum, "_news")])
total_df$double_matched <- length(tnum)
}
temp_df <- total_df[,c("quarter", "disp", "disp_f1", "disp_f2", "disp_f3", "disp_f4",
"mins", "speeches", "news", "double_matched")]
temp_df$disp_std <- standardise(temp_df$disp)
temp_df$disp_f1_std <- standardise(temp_df$disp_f1)
temp_df$disp_f2_std <- standardise(temp_df$disp_f2)
temp_df$disp_f3_std <- standardise(temp_df$disp_f3)
temp_df$disp_f4_std <- standardise(temp_df$disp_f4)
temp_df$mins_std <- standardise(temp_df$mins)
temp_df$speeches_std <- standardise(temp_df$speeches)
temp_df$news_std <- standardise(temp_df$news)
temp_df$variable <- spf_var
temp_df[,panelnames]
total_panel <- rbind(total_panel, temp_df)
ggplot(total_panel) + theme_bw() +
facet_wrap(variable~., nrow = 4, scales = "free") +
geom_line(aes(x = quarter, y = news_std, color = "Speeches"), alpha = 0.3) +
geom_line(aes(x = quarter, y = speeches_std, color = "News"), alpha = 0.3) +
geom_line(aes(x = quarter, y = mins_std, color = "Minutes")) +
geom_line(aes(x = quarter, y = disp_std, color = "Dispersion")) +
xlab("Date") + ylab("Std. Units")
setwd("~/Documents/GitHub/CBC_spillovers")
rm(list = ls())
require(stringr)
require(tm)
require(slam)
require(topicmodels)
require(tidyverse)
require(tidytext)
require(wordcloud)
require(plm)
require(lfe)
require(stargazer)
require(readxl)
require(openxlsx)
require(lubridate)
require(zoo)
require(topicdoc)
standardise <- function(x){
x <- (x - mean(x, na.rm = TRUE))/sd(x, na.rm = TRUE)
return(x)
}
### Define the directories where raw data is stored and clean will be saved
clean_dir <- "data/topic_data/"
##### ntopics
k <- 40
k <- 30
k <- 29
get_siglevel <- function(cor_obj){
sig_level <- "{}"
if (cor_obj$p.value <= 0.1){
sig_level <- "{.}"
}
if (cor_obj$p.value <= 0.05){
sig_level <- "{..}"
}
if (cor_obj$p.value <= 0.01){
sig_level <- "{...}"
}
return(sig_level)
}
comp_K_df <- data.frame(K = 15:40, not_matched = NA, double_matched = NA, disp = NA, GB_update = NA,
SPF_update = NA, GB_error = NA, SPF_error = NA, GB_SPF_gap = NA)
##### suffix for files
spec <- "_qly"
spec <- "_full_qly_k30"
spec <- "_full_qly_k40"
spec <- "_qly_k30"
spec <- paste0("_qly_k",k)
#spec <- "_guid_k30_qly"
##### Names of topic variables
variablenames <- paste0("T", 1:k)
# Import the topic summary for interpretation
import_filename =  "data/topic_data/full_topics_summary_k30.csv"
import_filename =  "data/topic_data/full_topics_summary_k40.csv"
import_filename =  "data/topic_data/short_topics_summary_k30.csv"
import_filename =  paste0("data/topic_data/short_topics_summary_k",k,".csv")
#import_filename =  "data/topic_data/joint_topics_summary_guid_k30.csv"
topic_summary <- read.csv(import_filename, encoding = "utf-8", stringsAsFactors = FALSE)
if (str_detect(spec,"guid")){
variablenames <- topic_summary$Topic
}
############################# Import the topic proportions #############################
# Minutes
import_filename = paste0(clean_dir,"minutes", spec,".csv")
minutes_df <- read.csv(import_filename, encoding = "utf-8", stringsAsFactors = FALSE)
minutes_df <- minutes_df[,c("quarter", variablenames)]
#topics_df <- minutes_df
# Speeches
import_filename = paste0(clean_dir,"speeches", spec,".csv")
speeches_df <- read.csv(import_filename, encoding = "utf-8", stringsAsFactors = FALSE)
speeches_df[,paste0(variablenames,"_speech")] <- speeches_df[,variablenames]
speeches_df <- speeches_df[,c("quarter", paste0(variablenames,"_speech"))]
# Articles
import_filename =  paste0(clean_dir,"articles", spec,".csv")
articles_df <- read.csv(import_filename, encoding = "utf-8", stringsAsFactors = FALSE)
articles_df[,paste0(variablenames,"_news")] <- articles_df[,variablenames]
articles_df <- articles_df[,c("quarter", paste0(variablenames,"_news"))]
# Combine into one quarterly df
topics_df <- merge(minutes_df, speeches_df, by = "quarter", all.x = TRUE)
topics_df <- merge(topics_df, articles_df, by = "quarter", all.x = TRUE)
# Import SPF data
spf_df <- read.csv("data/SPF/spf_disp_clean.csv", stringsAsFactors = F)
SPF_variables <- unique(unlist(str_extract_all(names(spf_df), "[A-Z]+")))
SPF_variables <- SPF_variables[which(SPF_variables != "TBOND")]
# Merge SPF with topics
spf_df$quarter <- as.Date(spf_df$quarter)
topics_df$quarter <- as.Date(topics_df$quarter)
total_df <- merge(spf_df, topics_df, by = "quarter")
total_df$quarter <- as.Date(total_df$quarter)
total_df <- total_df[which(total_df$quarter < "2020-01-01"),]
"
Match the topics to variables
"
topic_summary$SPF_vars <- ""
top_terms <- c("economi", "growth")
SPF_var <- "NGDP"
match_vars <- function(topic_summary, SPF_var, top_terms){
obs <-   which(str_detect(topic_summary$Top.5.Words, top_terms[1]) &
str_detect(topic_summary$Top.5.Words, top_terms[2]))
topic_summary$SPF_vars[obs] <- paste0(topic_summary$SPF_vars[obs], SPF_var, ",")
if (length(obs) < 1){
print(paste("No match for", SPF_var))
}
if (length(obs) > 1){
print(paste("Multiple matches for", SPF_var))
}
return(topic_summary)
}
topic_summary <- match_vars(topic_summary, "NGDP", c("economi", "growth"))
topic_summary <- match_vars(topic_summary, "RGDP", c("economi", "growth"))
topic_summary <- match_vars(topic_summary, "CPI", c("price", "inflat"))
topic_summary <- match_vars(topic_summary, "EMP", c("job", "emp"))
topic_summary <- match_vars(topic_summary, "UNEMP", c("job", "emp"))
topic_summary <- match_vars(topic_summary, "CPROF", c("corpor|compani", "profit"))
topic_summary <- match_vars(topic_summary, "INDPROD", c("industri", "produc|manufac"))
topic_summary <- match_vars(topic_summary, "HOUSING", c("hous", "home"))
topic_summary <- match_vars(topic_summary, "RRESINV", c("hous", "home"))
topic_summary <- match_vars(topic_summary, "RNRESIN", c("invest", "capit"))
topic_summary <- match_vars(topic_summary, "RCONSUM", c("spend", "consum"))
topic_summary <- match_vars(topic_summary, "RFEDGOV", c("tax", "budget"))
topic_summary <- match_vars(topic_summary, "RSLGOV", c("tax", "budget"))
panelnames <- c("variable", "quarter", "disp", "disp_f1", "disp_f2", "disp_f3", "disp_f4",
"mins", "speeches", "news", "double_matched",
"disp_std", "disp_f1_std", "disp_f2_std", "disp_f3_std", "disp_f4_std",
"mins_std", "speeches_std", "news_std")
total_panel <- data.frame(matrix(NA, nrow = 0, ncol = length(panelnames)))
total_df$double_matched <- NA
for (spf_var in SPF_variables){
# Pull out the relevant SPF variables
total_df$disp <- total_df[, paste0(spf_var, "_dispersion")]
total_df$disp_f1 <- total_df[, paste0(spf_var, "_f1_dispersion")]
total_df$disp_f2 <- total_df[, paste0(spf_var, "_f2_dispersion")]
total_df$disp_f3 <- total_df[, paste0(spf_var, "_f3_dispersion")]
total_df$disp_f4 <- total_df[, paste0(spf_var, "_f4_dispersion")]
# Pull out the relevant topic variables
tnum <- which(str_detect(topic_summary$SPF_vars, paste0(spf_var,",")))
if (length(tnum) == 1 ){
total_df$mins <- total_df[, paste0("T", tnum)]
total_df$speeches <- total_df[, paste0("T", tnum, "_speech")]
total_df$news <- total_df[, paste0("T", tnum, "_news")]
total_df$double_matched <- length(tnum)
} else if (length(tnum) == 0){
print(paste("No topic found for", spf_var))
total_df$mins <- NA
total_df$speeches <-NA
total_df$news <- NA
total_df$double_matched <- NA
} else {
print(paste("Multiple topics found for", spf_var))
total_df$mins <- rowSums(total_df[, paste0("T", tnum)])
total_df$speeches <- rowSums(total_df[, paste0("T", tnum, "_speech")])
total_df$news <- rowSums(total_df[, paste0("T", tnum, "_news")])
total_df$double_matched <- length(tnum)
}
temp_df <- total_df[,c("quarter", "disp", "disp_f1", "disp_f2", "disp_f3", "disp_f4",
"mins", "speeches", "news", "double_matched")]
temp_df$disp_std <- standardise(temp_df$disp)
temp_df$disp_f1_std <- standardise(temp_df$disp_f1)
temp_df$disp_f2_std <- standardise(temp_df$disp_f2)
temp_df$disp_f3_std <- standardise(temp_df$disp_f3)
temp_df$disp_f4_std <- standardise(temp_df$disp_f4)
temp_df$mins_std <- standardise(temp_df$mins)
temp_df$speeches_std <- standardise(temp_df$speeches)
temp_df$news_std <- standardise(temp_df$news)
temp_df$variable <- spf_var
temp_df[,panelnames]
total_panel <- rbind(total_panel, temp_df)
}
ggplot(total_panel) + theme_bw() +
facet_wrap(variable~., nrow = 4, scales = "free") +
geom_line(aes(x = quarter, y = news_std, color = "Speeches"), alpha = 0.3) +
geom_line(aes(x = quarter, y = speeches_std, color = "News"), alpha = 0.3) +
geom_line(aes(x = quarter, y = mins_std, color = "Minutes")) +
geom_line(aes(x = quarter, y = disp_std, color = "Dispersion")) +
xlab("Date") + ylab("Std. Units")
spf_gb_panel <- read.csv("data/spf_gb_panel.csv", stringsAsFactors = FALSE)
spf_gb_panel <- read.csv("data/spf_gb_panel.csv", stringsAsFactors = FALSE)
spf_gb_panel$quarter <- as.Date(spf_gb_panel$quarter)
total_panel$quarter <- as.Date(total_panel$quarter)
total_panel <- merge(total_panel, spf_gb_panel, by = c("variable", "quarter"), all.x = T)
obs <- which(total_panel$variable == "RRESINV")
cor.test(total_panel$disp[obs], total_panel$mins[obs])
total_panel$quarter <- as.Date(total_panel$quarter)
total_panel$period <- as.numeric(as.factor(total_panel$quarter))
total_panel <- pdata.frame(data.frame(total_panel), index = c("variable", "period"))
obs <- which(comp_K_df$K == k)
comp_K_df$not_matched[obs] <- paste(unique(total_panel$variable[which(is.na(total_panel$mins))]), collapse = ",")
comp_K_df$double_matched[obs] <- paste(unique(total_panel$variable[which(total_panel$double_matched > 1)]), collapse = ",")
test_temp <- cor.test(total_panel$disp_std, total_panel$mins_std)
comp_K_df$disp[obs] <- paste0(round(test_temp$estimate,3), get_siglevel(test_temp))
test_temp <- cor.test(total_panel$GB_update_abs_std, total_panel$mins_std)
comp_K_df$GB_update[obs] <- paste0(round(test_temp$estimate,3), get_siglevel(test_temp))
test_temp <- cor.test(total_panel$SPF_update_abs_std, total_panel$mins_std)
comp_K_df$SPF_update[obs] <- paste0(round(test_temp$estimate,3), get_siglevel(test_temp))
test_temp <- cor.test(total_panel$GB_now_error_abs_std, total_panel$mins_std)
comp_K_df$GB_error[obs] <- paste0(round(test_temp$estimate,3), get_siglevel(test_temp))
test_temp <- cor.test(total_panel$SPF_now_error_abs_std, total_panel$mins_std)
comp_K_df$SPF_error[obs] <- paste0(round(test_temp$estimate,3), get_siglevel(test_temp))
test_temp <- cor.test(total_panel$GB_SPF_now_gap_abs_std, total_panel$mins_std)
comp_K_df$GB_SPF_gap[obs] <- paste0(round(test_temp$estimate,3), get_siglevel(test_temp))
summary(felm(mins_std ~ disp_std, total_panel))
summary(felm(mins_std ~ disp_std + GB_update_abs_std + SPF_update_abs_std +
GB_now_error_abs_std + SPF_now_error_abs_std + GB_SPF_now_gap_abs_std, total_panel))
summary(felm(mins_std ~ disp_std + GB_update_abs_std + SPF_update_abs_std +
GB_now_error_abs_std + SPF_now_error_abs_std + GB_SPF_now_gap_abs_std | variable, total_panel))
summary(felm(mins_std ~ GB_SPF_now_gap_abs_std + plm::lag(mins_std,1:8) | variable + period, total_panel))
summary(felm(mins_std ~ plm::lag(mins_std,1) + disp_std + GB_update_abs_std + SPF_update_abs_std +
GB_now_error_abs_std + SPF_now_error_abs_std + GB_SPF_now_gap_abs_std | variable, total_panel))
summary(felm(mins_std ~ plm::lag(mins_std,1) | variable, total_panel))
summary(felm(mins_std ~ plm::lag(mins_std,1) + disp_std + GB_update_abs_std + SPF_update_abs_std +
GB_now_error_abs_std + SPF_now_error_abs_std + GB_SPF_now_gap_abs_std | variable, total_panel))
